{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst FINNHUB_API_URL = 'https://finnhub.io/api/v1';\nconst FINNHUB_API_KEY = 'ct3rqb1r01qka0m8t36gct3rqb1r01qka0m8t370';\n\n// Registrar una acción\nexport const registrarAccion = async datos => {\n  try {\n    const response = await axios.post(`${API_URL}/accion`, datos);\n    return response.data;\n  } catch (error) {\n    console.error('Error al registrar la acción:', error.message);\n    throw error;\n  }\n};\n\n// Obtener todas las acciones registradas\nexport const obtenerAcciones = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/acciones`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las acciones:', error.message);\n    throw error;\n  }\n};\n\n// Obtener histórico de una acción desde Finnhub\n// Obtener histórico de una acción desde Finnhub\nexport const obtenerHistoricoAccion = async simbolo => {\n  try {\n    const response = await axios.get(`${FINNHUB_API_URL}/stock/candle`, {\n      params: {\n        symbol: simbolo,\n        resolution: 'D',\n        from: Math.floor((Date.now() - 365 * 24 * 60 * 60 * 1000) / 1000),\n        // Último año\n        to: Math.floor(Date.now() / 1000),\n        token: FINNHUB_API_KEY\n      }\n    });\n    const {\n      t,\n      c\n    } = response.data;\n    if (!t || !c) {\n      throw new Error('Datos históricos incompletos');\n    }\n\n    // Convertir los datos en un formato adecuado para recharts\n    const historico = t.map((timestamp, index) => ({\n      fecha: new Date(timestamp * 1000).toLocaleDateString(),\n      // Convertir timestamp a fecha legible\n      precio: c[index] // Precio de cierre\n    }));\n    return historico;\n  } catch (error) {\n    console.error('Error al obtener el historial de la acción desde Finnhub:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","FINNHUB_API_URL","FINNHUB_API_KEY","registrarAccion","datos","response","post","data","error","console","message","obtenerAcciones","get","obtenerHistoricoAccion","simbolo","params","symbol","resolution","from","Math","floor","Date","now","to","token","t","c","Error","historico","map","timestamp","index","fecha","toLocaleDateString","precio"],"sources":["C:/Users/marlo/Desktop/EPN 2024-B/Construccion/Proyecto/proyecto 2.0/bolsa-valores/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\nconst FINNHUB_API_URL = 'https://finnhub.io/api/v1';\r\nconst FINNHUB_API_KEY = 'ct3rqb1r01qka0m8t36gct3rqb1r01qka0m8t370';\r\n\r\n// Registrar una acción\r\nexport const registrarAccion = async (datos) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/accion`, datos);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al registrar la acción:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todas las acciones registradas\r\nexport const obtenerAcciones = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/acciones`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener las acciones:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener histórico de una acción desde Finnhub\r\n// Obtener histórico de una acción desde Finnhub\r\nexport const obtenerHistoricoAccion = async (simbolo) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${FINNHUB_API_URL}/stock/candle`,\r\n      {\r\n        params: {\r\n          symbol: simbolo,\r\n          resolution: 'D',\r\n          from: Math.floor((Date.now() - 365 * 24 * 60 * 60 * 1000) / 1000), // Último año\r\n          to: Math.floor(Date.now() / 1000),\r\n          token: FINNHUB_API_KEY,\r\n        },\r\n      }\r\n    );\r\n    \r\n    const { t, c } = response.data;\r\n\r\n    if (!t || !c) {\r\n      throw new Error('Datos históricos incompletos');\r\n    }\r\n\r\n    // Convertir los datos en un formato adecuado para recharts\r\n    const historico = t.map((timestamp, index) => ({\r\n      fecha: new Date(timestamp * 1000).toLocaleDateString(), // Convertir timestamp a fecha legible\r\n      precio: c[index], // Precio de cierre\r\n    }));\r\n\r\n    return historico;\r\n  } catch (error) {\r\n    console.error('Error al obtener el historial de la acción desde Finnhub:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,eAAe,GAAG,2BAA2B;AACnD,MAAMC,eAAe,GAAG,0CAA0C;;AAElE;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,SAAS,EAAEI,KAAK,CAAC;IAC7D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7D,MAAMF,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMN,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,WAAW,CAAC;IACvD,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,MAAMF,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMK,sBAAsB,GAAG,MAAOC,OAAO,IAAK;EACvD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACa,GAAG,CAC9B,GAAGX,eAAe,eAAe,EACjC;MACEc,MAAM,EAAE;QACNC,MAAM,EAAEF,OAAO;QACfG,UAAU,EAAE,GAAG;QACfC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC;QAAE;QACnEC,EAAE,EAAEJ,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QACjCE,KAAK,EAAEtB;MACT;IACF,CACF,CAAC;IAED,MAAM;MAAEuB,CAAC;MAAEC;IAAE,CAAC,GAAGrB,QAAQ,CAACE,IAAI;IAE9B,IAAI,CAACkB,CAAC,IAAI,CAACC,CAAC,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACA,MAAMC,SAAS,GAAGH,CAAC,CAACI,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,MAAM;MAC7CC,KAAK,EAAE,IAAIX,IAAI,CAACS,SAAS,GAAG,IAAI,CAAC,CAACG,kBAAkB,CAAC,CAAC;MAAE;MACxDC,MAAM,EAAER,CAAC,CAACK,KAAK,CAAC,CAAE;IACpB,CAAC,CAAC,CAAC;IAEH,OAAOH,SAAS;EAClB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2DAA2D,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzF,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}