{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst API_KEY = '078cd8766c85476cadb219120424bb75';\n\n// Registrar una acción\nexport const registrarAccion = async datos => {\n  try {\n    const response = await axios.post(`${API_URL}/accion`, datos);\n    return response.data;\n  } catch (error) {\n    console.error('Error al registrar la acción:', error.message);\n    throw error;\n  }\n};\n// Obtener precio actual de una acción desde Twelve Data\nexport const obtenerPrecioActual = async simbolo => {\n  try {\n    const response = await axios.get('https://api.twelvedata.com/quote', {\n      params: {\n        symbol: simbolo,\n        apikey: API_KEY\n      }\n    });\n    const {\n      close\n    } = response.data; // Precio actual\n    if (!close) {\n      throw new Error('Precio actual no disponible');\n    }\n    return parseFloat(close);\n  } catch (error) {\n    console.error('Error al obtener el precio actual desde Twelve Data:', error.message);\n    throw error;\n  }\n};\n\n// Obtener todas las acciones registradas\nexport const obtenerAcciones = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/acciones`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las acciones:', error.message);\n    throw error;\n  }\n};\n\n// Obtener histórico de una acción desde Twelve Data\nexport const obtenerHistoricoAccion = async simbolo => {\n  try {\n    const response = await axios.get('https://api.twelvedata.com/time_series', {\n      params: {\n        symbol: simbolo,\n        interval: '1day',\n        apikey: API_KEY\n      }\n    });\n    const {\n      values\n    } = response.data;\n    if (!values) {\n      throw new Error('Datos históricos no disponibles');\n    }\n    const historico = values.map(item => ({\n      fecha: item.datetime,\n      precio: parseFloat(item.close)\n    }));\n    return historico;\n  } catch (error) {\n    console.error('Error al obtener el historial de la acción desde Twelve Data:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","API_KEY","registrarAccion","datos","response","post","data","error","console","message","obtenerPrecioActual","simbolo","get","params","symbol","apikey","close","Error","parseFloat","obtenerAcciones","obtenerHistoricoAccion","interval","values","historico","map","item","fecha","datetime","precio"],"sources":["C:/Users/marlo/Documents/GitHub/Proyecto-Construccion/bolsa-valores/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\nconst API_KEY = '078cd8766c85476cadb219120424bb75';\r\n\r\n\r\n\r\n// Registrar una acción\r\nexport const registrarAccion = async (datos) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/accion`, datos);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al registrar la acción:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n// Obtener precio actual de una acción desde Twelve Data\r\nexport const obtenerPrecioActual = async (simbolo) => {\r\n  try {\r\n    const response = await axios.get('https://api.twelvedata.com/quote', {\r\n      params: {\r\n        symbol: simbolo,\r\n        apikey: API_KEY,\r\n      },\r\n    });\r\n\r\n    const { close } = response.data; // Precio actual\r\n    if (!close) {\r\n      throw new Error('Precio actual no disponible');\r\n    }\r\n\r\n    return parseFloat(close);\r\n  } catch (error) {\r\n    console.error('Error al obtener el precio actual desde Twelve Data:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Obtener todas las acciones registradas\r\nexport const obtenerAcciones = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/acciones`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener las acciones:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Obtener histórico de una acción desde Twelve Data\r\nexport const obtenerHistoricoAccion = async (simbolo) => {\r\n  \r\n  try {\r\n    const response = await axios.get('https://api.twelvedata.com/time_series', {\r\n      params: {\r\n        symbol: simbolo,\r\n        interval: '1day',\r\n        apikey: API_KEY,\r\n      },\r\n    });\r\n\r\n    const { values } = response.data;\r\n    if (!values) {\r\n      throw new Error('Datos históricos no disponibles');\r\n    }\r\n\r\n    const historico = values.map((item) => ({\r\n      fecha: item.datetime,\r\n      precio: parseFloat(item.close),\r\n    }));\r\n\r\n    return historico;\r\n  } catch (error) {\r\n    console.error('Error al obtener el historial de la acción desde Twelve Data:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,OAAO,GAAG,kCAAkC;;AAIlD;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAEG,KAAK,CAAC;IAC7D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7D,MAAMF,KAAK;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMG,mBAAmB,GAAG,MAAOC,OAAO,IAAK;EACpD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACa,GAAG,CAAC,kCAAkC,EAAE;MACnEC,MAAM,EAAE;QACNC,MAAM,EAAEH,OAAO;QACfI,MAAM,EAAEd;MACV;IACF,CAAC,CAAC;IAEF,MAAM;MAAEe;IAAM,CAAC,GAAGZ,QAAQ,CAACE,IAAI,CAAC,CAAC;IACjC,IAAI,CAACU,KAAK,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAOC,UAAU,CAACF,KAAK,CAAC;EAC1B,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAACE,OAAO,CAAC;IACpF,MAAMF,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAML,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,WAAW,CAAC;IACvD,OAAOI,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,MAAMF,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMa,sBAAsB,GAAG,MAAOT,OAAO,IAAK;EAEvD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACa,GAAG,CAAC,wCAAwC,EAAE;MACzEC,MAAM,EAAE;QACNC,MAAM,EAAEH,OAAO;QACfU,QAAQ,EAAE,MAAM;QAChBN,MAAM,EAAEd;MACV;IACF,CAAC,CAAC;IAEF,MAAM;MAAEqB;IAAO,CAAC,GAAGlB,QAAQ,CAACE,IAAI;IAChC,IAAI,CAACgB,MAAM,EAAE;MACX,MAAM,IAAIL,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,MAAMM,SAAS,GAAGD,MAAM,CAACE,GAAG,CAAEC,IAAI,KAAM;MACtCC,KAAK,EAAED,IAAI,CAACE,QAAQ;MACpBC,MAAM,EAAEV,UAAU,CAACO,IAAI,CAACT,KAAK;IAC/B,CAAC,CAAC,CAAC;IAEH,OAAOO,SAAS;EAClB,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+DAA+D,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7F,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}